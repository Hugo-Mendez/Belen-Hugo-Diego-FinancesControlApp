/*
 * 
 * Authors: Belén Miranda Hernández, Diego Carrillo Arroyo y Hugo Méndez Barrantes.
 * 
 */
package Proyecto;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ImageIcon;

public class GraphicWindow extends javax.swing.JFrame {

    ///GLOBAL VARIABLES///
    Family startF;
    DefaultListModel hardware = new DefaultListModel();
    DefaultListModel hardware2 = new DefaultListModel();
    ArrayList job = new ArrayList();
    ArrayList jobPerson = new ArrayList();

    public GraphicWindow() {

        initComponents();

        this.setLocationRelativeTo(null);
        this.setTitle("~Finance control~");
        ImageIcon icon = new ImageIcon("C:/FinancesControlApp/moneyIcon.png");
        this.setIconImage(icon.getImage());

    } 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextLastName = new javax.swing.JTextField();
        jTextLocation = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextID = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextName = new javax.swing.JTextField();
        jTextAge = new javax.swing.JTextField();
        JTextJob1 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jButtonAddFamily = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jTextID2 = new javax.swing.JTextField();
        JtextName2 = new javax.swing.JTextField();
        jTextAge2 = new javax.swing.JTextField();
        jTextOcupation2 = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jComboBoxLastNames = new javax.swing.JComboBox<>();
        jComboBoxGender2 = new javax.swing.JComboBox<>();
        jComboBoxSchool2 = new javax.swing.JComboBox<>();
        jButtonAddPerson = new javax.swing.JButton();
        addJobPersonButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jTextAmount = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        jTextDescription = new javax.swing.JTextField();
        jComboPerson = new javax.swing.JComboBox<>();
        jComboBoxFamily = new javax.swing.JComboBox<>();
        jLabel22 = new javax.swing.JLabel();
        jComboBoxWeek = new javax.swing.JComboBox<>();
        jComboBoxMonth = new javax.swing.JComboBox<>();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jComboBox8 = new javax.swing.JComboBox<>();
        jComboBoxClasification = new javax.swing.JComboBox<>();
        jLabel26 = new javax.swing.JLabel();
        jButtonInOutCome = new javax.swing.JButton();
        jLabelYear = new javax.swing.JLabel();
        jButtonLeft = new javax.swing.JButton();
        jButtonright = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jComboBoxInOut = new javax.swing.JComboBox<>();
        jComboBoxFamily2 = new javax.swing.JComboBox<>();
        jComboPerson2 = new javax.swing.JComboBox<>();
        jLabelConsult = new javax.swing.JLabel();
        jButtonConsult = new javax.swing.JButton();
        jButtonClear2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jComboBoxOperations = new javax.swing.JComboBox<>();
        jLabel27 = new javax.swing.JLabel();
        jButtonReport = new javax.swing.JButton();
        jButtonClean = new javax.swing.JButton();
        jButtonLeft1 = new javax.swing.JButton();
        jLabelYear1 = new javax.swing.JLabel();
        jButtonright1 = new javax.swing.JButton();
        jComboBoxFamily1 = new javax.swing.JComboBox<>();
        jComboPerson1 = new javax.swing.JComboBox<>();
        jComboBoxMonthReport = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.setBackground(new java.awt.Color(153, 255, 153));

        jPanel2.setBackground(new java.awt.Color(204, 255, 204));

        jLabel1.setText("Last Name");

        jLabel2.setText("Location");

        jLabel3.setText("ID");
        jLabel3.setToolTipText("");

        jLabel4.setText("Name");

        jLabel5.setText("Ocupation");

        jLabel6.setText("Gender");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel7.setText("Initial Member's Information");
        jLabel7.setToolTipText("at least  one member in order to register a family");

        jLabel8.setText("Age");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel9.setText("Family's Information");

        jComboBox1.setBackground(new java.awt.Color(0, 255, 0));
        jComboBox1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        jLabel10.setText("School grade");

        jComboBox2.setBackground(new java.awt.Color(0, 255, 51));
        jComboBox2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Non", "Primary School", "High School", "College", " ", " " }));

        jButtonAddFamily.setBackground(new java.awt.Color(102, 255, 102));
        jButtonAddFamily.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonAddFamily.setText("ADD FAMILY");
        jButtonAddFamily.setToolTipText("Fill all text fields before clicking");
        jButtonAddFamily.setEnabled(false);
        jButtonAddFamily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddFamilyActionPerformed(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(102, 255, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setText("ADD JOB");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButtonAddFamily, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(78, 78, 78))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel9)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextLastName, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                                    .addComponent(jTextLocation))))
                        .addGap(144, 144, 144)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 82, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTextName)
                                    .addComponent(jTextAge)
                                    .addComponent(jComboBox1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jComboBox2, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jTextID, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(JTextJob1, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(79, 79, 79))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jTextID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2)
                    .addComponent(jTextLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(JTextJob1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddFamily, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12))
        );

        jTabbedPane1.addTab("Register Family", jPanel2);

        jPanel3.setBackground(new java.awt.Color(204, 255, 204));

        jLabel11.setText("ID");

        jLabel12.setText("Name");

        jLabel13.setText("Age");

        jLabel14.setText("Gender");

        jLabel15.setText("School grade");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel16.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel16.setText("Person's Information");

        jLabel17.setText("Ocupation");

        jLabel18.setText("Family's last name");

        jComboBoxLastNames.setBackground(new java.awt.Color(0, 255, 0));
        jComboBoxLastNames.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jComboBoxGender2.setBackground(new java.awt.Color(0, 255, 0));
        jComboBoxGender2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxGender2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Male", "Female", "Other" }));

        jComboBoxSchool2.setBackground(new java.awt.Color(0, 255, 0));
        jComboBoxSchool2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxSchool2.setForeground(new java.awt.Color(51, 51, 51));
        jComboBoxSchool2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Non", "Primary School", "High School", "College" }));

        jButtonAddPerson.setBackground(new java.awt.Color(102, 255, 102));
        jButtonAddPerson.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonAddPerson.setText("ADD PERSON");
        jButtonAddPerson.setEnabled(false);
        jButtonAddPerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddPersonActionPerformed(evt);
            }
        });

        addJobPersonButton.setBackground(new java.awt.Color(102, 255, 102));
        addJobPersonButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addJobPersonButton.setText("ADD JOB");
        addJobPersonButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addJobPersonButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(170, 170, 170)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel18)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 47, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jTextOcupation2, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(jComboBoxLastNames, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextID2)
                            .addComponent(JtextName2)
                            .addComponent(jTextAge2)
                            .addComponent(jComboBoxGender2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jComboBoxSchool2, 0, 200, Short.MAX_VALUE)
                            .addComponent(addJobPersonButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jButtonAddPerson, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(171, 171, 171))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel18)
                            .addComponent(jComboBoxLastNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextID2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(JtextName2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13)
                        .addGap(6, 6, 6))
                    .addComponent(jTextAge2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jComboBoxGender2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(jComboBoxSchool2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel17)
                    .addComponent(jTextOcupation2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addJobPersonButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButtonAddPerson, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        jTabbedPane1.addTab("Register Person ", jPanel3);

        jPanel1.setBackground(new java.awt.Color(204, 255, 204));

        jLabel19.setText("Person");

        jLabel20.setText("Amount");

        jLabel21.setText("Description");

        jComboPerson.setBackground(new java.awt.Color(0, 255, 0));
        jComboPerson.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jComboBoxFamily.setBackground(new java.awt.Color(153, 255, 153));
        jComboBoxFamily.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxFamily.setForeground(new java.awt.Color(153, 255, 153));
        jComboBoxFamily.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFamilyActionPerformed(evt);
            }
        });

        jLabel22.setText("Family");

        jComboBoxWeek.setBackground(new java.awt.Color(0, 255, 0));
        jComboBoxWeek.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxWeek.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Week 1", "Week 2", "Week 3", "Week 4" }));

        jComboBoxMonth.setBackground(new java.awt.Color(0, 255, 0));
        jComboBoxMonth.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        jLabel23.setText("Week");

        jLabel24.setText("Month");

        jLabel25.setText("Year");

        jComboBox8.setBackground(new java.awt.Color(0, 255, 0));
        jComboBox8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBox8.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Register income", "Register outcome" }));
        jComboBox8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox8ActionPerformed(evt);
            }
        });

        jComboBoxClasification.setBackground(new java.awt.Color(0, 255, 0));
        jComboBoxClasification.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxClasification.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Physiology", "Security", "Membership", "Recognition", "Self-realization" }));
        jComboBoxClasification.setEnabled(false);

        jLabel26.setText("Clasification");
        jLabel26.setEnabled(false);

        jButtonInOutCome.setBackground(new java.awt.Color(102, 255, 102));
        jButtonInOutCome.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonInOutCome.setText("ADD INCOME");
        jButtonInOutCome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInOutComeActionPerformed(evt);
            }
        });

        jLabelYear.setText("2020");

        jButtonLeft.setBackground(new java.awt.Color(102, 255, 102));
        jButtonLeft.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonLeft.setText("<");
        jButtonLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeftActionPerformed(evt);
            }
        });

        jButtonright.setBackground(new java.awt.Color(102, 255, 102));
        jButtonright.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonright.setText(">");
        jButtonright.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonrightActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel26)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jComboBox8, 0, 180, Short.MAX_VALUE)
                    .addComponent(jTextAmount)
                    .addComponent(jComboPerson, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBoxFamily, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextDescription)
                    .addComponent(jComboBoxClasification, 0, 180, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 109, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jButtonInOutCome, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel23, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jComboBoxWeek, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButtonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelYear, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonright, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(41, 41, 41))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jComboBox8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(jComboBoxFamily, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel25)
                    .addComponent(jLabelYear)
                    .addComponent(jButtonLeft, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonright, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel24)
                    .addComponent(jComboBoxMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19)
                    .addComponent(jComboPerson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxWeek, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23)
                    .addComponent(jLabel20)
                    .addComponent(jTextAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(jTextDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonInOutCome))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(jComboBoxClasification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(130, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Register income or outcome", jPanel1);

        jPanel4.setBackground(new java.awt.Color(204, 255, 255));

        jComboBoxInOut.setBackground(new java.awt.Color(51, 153, 255));
        jComboBoxInOut.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxInOut.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Consult incomes", "Consult outcomes" }));

        jComboBoxFamily2.setBackground(new java.awt.Color(51, 153, 255));
        jComboBoxFamily2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxFamily2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFamily2ActionPerformed(evt);
            }
        });

        jComboPerson2.setBackground(new java.awt.Color(51, 153, 255));
        jComboPerson2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabelConsult.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabelConsult.setText("Section for consulting a person's incomes and outcomes");

        jButtonConsult.setBackground(new java.awt.Color(153, 204, 255));
        jButtonConsult.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonConsult.setText("CONSULT");
        jButtonConsult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConsultActionPerformed(evt);
            }
        });

        jButtonClear2.setBackground(new java.awt.Color(153, 204, 255));
        jButtonClear2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonClear2.setText("CLEAR");
        jButtonClear2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonClear2ActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(jList2);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(122, 122, 122)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabelConsult)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jComboBoxFamily2, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jComboPerson2, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboBoxInOut, javax.swing.GroupLayout.PREFERRED_SIZE, 290, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jButtonClear2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonConsult, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)))
                    .addComponent(jScrollPane2))
                .addContainerGap(122, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabelConsult)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxInOut, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonConsult))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboPerson2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxFamily2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonClear2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Consult", jPanel4);

        jPanel5.setBackground(new java.awt.Color(204, 255, 255));

        jScrollPane1.setViewportView(jList1);

        jComboBoxOperations.setBackground(new java.awt.Color(51, 153, 255));
        jComboBoxOperations.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxOperations.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Percentage by income classification", "Class with the highest saving capacity", "Families with only physiology and safety graduates", "Families that spends 10% or more on self-realization", "School grade that saves the most", "Descending list of families by annual income", "Descending list of families by annual savings", "List of families with zero annual savings", "Week in which X person registered more expenses", "Week in which X family registered more income", " ", " ", " ", " " }));
        jComboBoxOperations.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxOperationsActionPerformed(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        jLabel27.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel27.setText("Operations");

        jButtonReport.setBackground(new java.awt.Color(153, 204, 255));
        jButtonReport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonReport.setText("REPORT");
        jButtonReport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonReportActionPerformed(evt);
            }
        });

        jButtonClean.setBackground(new java.awt.Color(153, 204, 255));
        jButtonClean.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonClean.setText("CLEAR");
        jButtonClean.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCleanActionPerformed(evt);
            }
        });

        jButtonLeft1.setBackground(new java.awt.Color(153, 204, 255));
        jButtonLeft1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonLeft1.setText("<");
        jButtonLeft1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLeft1ActionPerformed(evt);
            }
        });

        jLabelYear1.setText("2020");

        jButtonright1.setBackground(new java.awt.Color(153, 204, 255));
        jButtonright1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButtonright1.setText(">");
        jButtonright1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonright1ActionPerformed(evt);
            }
        });

        jComboBoxFamily1.setBackground(new java.awt.Color(51, 153, 255));
        jComboBoxFamily1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxFamily1.setEnabled(false);
        jComboBoxFamily1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxFamily1ActionPerformed(evt);
            }
        });

        jComboPerson1.setBackground(new java.awt.Color(51, 153, 255));
        jComboPerson1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboPerson1.setEnabled(false);

        jComboBoxMonthReport.setBackground(new java.awt.Color(51, 153, 255));
        jComboBoxMonthReport.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jComboBoxMonthReport.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December" }));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 626, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jComboBoxOperations, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jButtonLeft1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabelYear1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButtonright1, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxMonthReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBoxFamily1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jButtonReport)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonClean, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jComboPerson1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(jLabel27)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBoxOperations, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonReport)
                    .addComponent(jButtonClean))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelYear1)
                    .addComponent(jButtonright1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonLeft1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jComboBoxFamily1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboPerson1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxMonthReport, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(186, 186, 186))
        );

        jTabbedPane1.addTab("Reports", jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 722, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonInOutComeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInOutComeActionPerformed
        if (checkIfFilledInOutCome() == false) {
            JOptionPane.showMessageDialog(rootPane, "All text fields must be filled.");
        } else {
            if (jButtonInOutCome.getText().equals("ADD INCOME")) {
                addIncome(jComboBoxFamily.getSelectedItem().toString());
                JOptionPane.showMessageDialog(rootPane, "Income registered succesfully.");
            } else {//outcome
                addOutcome(jComboBoxFamily.getSelectedItem().toString());
                JOptionPane.showMessageDialog(rootPane, "Outcome registered succesfully.");
            }
        }
    }//GEN-LAST:event_jButtonInOutComeActionPerformed

    private void jComboBox8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox8ActionPerformed
        if (jComboBox8.getSelectedItem().equals("Register outcome")) {
            jLabel26.setEnabled(true);
            jComboBoxClasification.setEnabled(true);
            jButtonInOutCome.setText("ADD OUTCOME");
        } else {
            jLabel26.setEnabled(false);
            jComboBoxClasification.setEnabled(false);
            jButtonInOutCome.setText("ADD INCOME");

        }
    }//GEN-LAST:event_jComboBox8ActionPerformed

    private void jComboBoxFamilyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFamilyActionPerformed
        Family fam = searchFamily(jComboBoxFamily.getSelectedItem().toString());
        comboBoxPer(fam, 1);
    }//GEN-LAST:event_jComboBoxFamilyActionPerformed

    private void addJobPersonButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addJobPersonButtonActionPerformed
        if (jTextOcupation2.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Invalid occupation");
        } else {
            jobPerson.add(jTextOcupation2.getText());
            jTextOcupation2.setText("");
            jButtonAddPerson.setEnabled(true);
            JOptionPane.showMessageDialog(rootPane, "occupation added correctly");
        }
    }//GEN-LAST:event_addJobPersonButtonActionPerformed

    private void jButtonAddPersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddPersonActionPerformed
        if (checkIfFilledPerson() == false) {
            JOptionPane.showMessageDialog(rootPane, "All text fields must be filled.");
        } else {
            if (checkForId(Integer.parseInt(jTextID2.getText())) == false) {
                JOptionPane.showMessageDialog(rootPane, "Repeated ID, so there is a registered person with that ID.");

            } else {
                ArrayList newListIn = new ArrayList();
                ArrayList newListOu = new ArrayList();
                Person newPerson = new Person(Integer.parseInt(jTextID2.getText()), JtextName2.getText(), Integer.parseInt(jTextAge2.getText()), jobPerson, jComboBoxGender2.getSelectedItem().toString(), jComboBoxSchool2.getSelectedItem().toString(), newListIn, newListOu);
                Family fam = searchFamily(jComboBoxLastNames.getSelectedItem().toString());

                fam.addMember(newPerson);
                jButtonAddPerson.setEnabled(false);
                jobPerson.clear();
                JOptionPane.showMessageDialog(rootPane, "Person registered succesfully.");
            }
        }
    }//GEN-LAST:event_jButtonAddPersonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        if (JTextJob1.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Invalid occupation");
        } else {
            job.add(JTextJob1.getText());
            JTextJob1.setText("");
            jButtonAddFamily.setEnabled(true);
            JOptionPane.showMessageDialog(rootPane, "occupation added correctly");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButtonAddFamilyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddFamilyActionPerformed
        if (checkIfFilled() == false) {
            JOptionPane.showMessageDialog(rootPane, "All text fields must be filled.");
        } else {
            if (checkForId(Integer.parseInt(jTextID.getText())) == false) {
                JOptionPane.showMessageDialog(rootPane, "Repeated ID, so there is a registered person with that ID.");

            } else {
                ArrayList newListIn = new ArrayList();
                ArrayList newListOu = new ArrayList();

                Person newP = new Person(Integer.parseInt(jTextID.getText()), jTextName.getText(), Integer.parseInt(jTextAge.getText()), job, jComboBox1.getSelectedItem().toString(), jComboBox2.getSelectedItem().toString(), newListIn, newListOu);

                if (searchFamily(jTextLastName.getText()) == null) {
                    ArrayList member = new ArrayList();
                    member.add(newP);
                    addFamily(jTextLastName.getText(), jTextLocation.getText(), member);

                    jComboBoxFamily.addItem(jTextLastName.getText());
                    jComboBoxLastNames.addItem(jTextLastName.getText());
                    jComboBoxFamily1.addItem(jTextLastName.getText());
                    jComboBoxFamily2.addItem(jTextLastName.getText());

                    jButtonAddFamily.setEnabled(false);
                    job.clear(); 
                    JOptionPane.showMessageDialog(rootPane, "Family registered succesfully.");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "This family is already registered, you should choose another last name.");
                }

            }

        }
    }//GEN-LAST:event_jButtonAddFamilyActionPerformed

    private void jButtonLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeftActionPerformed
        if (Integer.parseInt(jLabelYear.getText()) > 2020) {
            jLabelYear.setText(String.valueOf(Integer.parseInt(jLabelYear.getText()) - 1));
        }
    }//GEN-LAST:event_jButtonLeftActionPerformed

    private void jButtonrightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonrightActionPerformed
        if (Integer.parseInt(jLabelYear.getText()) < 9999) {
            jLabelYear.setText(String.valueOf(Integer.parseInt(jLabelYear.getText()) + 1));
        }
    }//GEN-LAST:event_jButtonrightActionPerformed

    private void jComboBoxOperationsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxOperationsActionPerformed
        if (jComboBoxOperations.getSelectedIndex() == 0) { //first operation*
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(true);
            stateYearButton(true);

        } else if (jComboBoxOperations.getSelectedIndex() == 1) {//second operation*
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(true);
            stateYearButton(true); 
        } else if (jComboBoxOperations.getSelectedIndex() == 2) {//third operation*
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(false);
        } else if (jComboBoxOperations.getSelectedIndex() == 3) {//fourth operation*
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(true); 
        } else if (jComboBoxOperations.getSelectedIndex() == 4) {//fifth operation*
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(true);
        } else if (jComboBoxOperations.getSelectedIndex() == 5) {//sixth operation*
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(true);
        } else if (jComboBoxOperations.getSelectedIndex() == 6) { //seventh operation*
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(true);
        } else if (jComboBoxOperations.getSelectedIndex() == 7) { //eighth operation
            jComboBoxFamily1.setEnabled(false);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(true);
        } else if (jComboBoxOperations.getSelectedIndex() == 8) {//nineth operation
            jComboBoxFamily1.setEnabled(true);
            jComboPerson1.setEnabled(true);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(true);
        } else { //tenth operation
            jComboBoxFamily1.setEnabled(true);
            jComboPerson1.setEnabled(false);
            jComboBoxMonthReport.setEnabled(false);
            stateYearButton(true);
        }
    }//GEN-LAST:event_jComboBoxOperationsActionPerformed

    private void jButtonReportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonReportActionPerformed
        if (startF != null) {
            if (jComboBoxOperations.getSelectedIndex() == 0) { //first operation*
                IncomeClasificationPercentage(jComboBoxMonthReport.getSelectedItem().toString(), jLabelYear1.getText());
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 1) {//second operation*
                String moreSF = moreSavingFamily(jComboBoxMonthReport.getSelectedItem().toString(), jLabelYear1.getText());
                hardware.addElement("The family class that saves the most is: " + moreSF);
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 2) {//third operation*
                int percentage = SecurityAndPhysiologyPercentage();
                hardware.addElement("The percentage is: " + "%" + percentage);
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 3) {//fourth operation*
                int realization = justSelfRealization(jLabelYear1.getText());
                hardware.addElement("There are " + realization + " families that spend %10 or more in self-realization");
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 4) {//fifth operation*
                String scholarGrade = schoolarGrade(jLabelYear1.getText());
                hardware.addElement("The school grade that has the biggest save capacity: " + scholarGrade);
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 5) {//sixth operation*
                sortFamiliesByAnnualIncome(jLabelYear1.getText());
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 6) {//seventh operation*
                sortFamiliesByAnnualSaving(jLabelYear1.getText());
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 7) {//eighth operation 
                sortFamiliesZeroSaving(jLabelYear1.getText());
                jList1.setModel(hardware);
            } else if (jComboBoxOperations.getSelectedIndex() == 8) {//nineth operation
                String wPerson = getWeekPersonExpense(jComboPerson1.getSelectedItem().toString(), jLabelYear1.getText());
                hardware.addElement("The week in which this person spends more is: " + wPerson);
                jList1.setModel(hardware);
            } else { //tenth operation
                String wFamily = getWeekFamilyExpense(jComboBoxFamily1.getSelectedItem().toString(), jLabelYear1.getText());
                hardware.addElement("The week in which this family recives more incomes is: " + wFamily);
                jList1.setModel(hardware);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "There aren't registered families yet, you should register at least one, before consulting.");
        }
    }//GEN-LAST:event_jButtonReportActionPerformed

    private void jButtonCleanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCleanActionPerformed
        hardware.clear();

    }//GEN-LAST:event_jButtonCleanActionPerformed

    private void jButtonLeft1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLeft1ActionPerformed
        if (Integer.parseInt(jLabelYear1.getText()) > 2020) {
            jLabelYear1.setText(String.valueOf(Integer.parseInt(jLabelYear1.getText()) - 1));
        }
    }//GEN-LAST:event_jButtonLeft1ActionPerformed

    private void jButtonright1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonright1ActionPerformed
        if (Integer.parseInt(jLabelYear1.getText()) < 9999) {
            jLabelYear1.setText(String.valueOf(Integer.parseInt(jLabelYear1.getText()) + 1));
        }
    }//GEN-LAST:event_jButtonright1ActionPerformed

    private void jComboBoxFamily1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFamily1ActionPerformed
        Family fam = searchFamily(jComboBoxFamily1.getSelectedItem().toString());
        comboBoxPer(fam, 2);
    }//GEN-LAST:event_jComboBoxFamily1ActionPerformed

    private void jButtonClear2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonClear2ActionPerformed
        hardware2.clear();
    }//GEN-LAST:event_jButtonClear2ActionPerformed

    private void jComboBoxFamily2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxFamily2ActionPerformed
        Family fam = searchFamily(jComboBoxFamily2.getSelectedItem().toString());
        comboBoxPer(fam, 3);
    }//GEN-LAST:event_jComboBoxFamily2ActionPerformed

    private void jButtonConsultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConsultActionPerformed
        if (startF != null) {
            if (jComboBoxInOut.getSelectedIndex() == 0) {
                showIncomes(jComboPerson2.getSelectedItem().toString());
                jList2.setModel(hardware2);
            } else {
                showOutcomes(jComboPerson2.getSelectedItem().toString());
                jList2.setModel(hardware2);
            } 
        }else{
            JOptionPane.showMessageDialog(rootPane, "There aren't registered families yet, you should register at least one, before consulting.");
        }
        
    }//GEN-LAST:event_jButtonConsultActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GraphicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GraphicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GraphicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GraphicWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GraphicWindow().setVisible(true);
            }
        });
    }

    public void stateYearButton(boolean state) { //Function that enables or not some buttons and a jLabel
        jButtonLeft1.setEnabled(state);
        jButtonright1.setEnabled(state);
        jLabelYear1.setEnabled(state);
    }

    public void addIncome(String lastName) { //recives a lastName and adds the income to incomeList that belongs to the person selected in jComboPerson 
        Family fam = searchFamily(lastName);    //searchs the family that the person belongs to

        ArrayList members = fam.getMember(); 
        int a = 0;
        while (a < members.size()) {

            Person auxP = (Person) members.get(a);
            if (auxP.getName().equals(jComboPerson.getSelectedItem().toString())) {
                Income newI = new Income(jTextDescription.getText(), Integer.parseInt(jTextAmount.getText()), jComboBoxWeek.getSelectedItem().toString(), jComboBoxMonth.getSelectedItem().toString(), jLabelYear.getText());

                auxP.getIncomeList().add(newI); //adds the income
                break;

            }
            a++;
        } 

    } 

    public void addOutcome(String lastName) { //recives a last name and adds an outcome to a specific person outcome list
        Family fam = searchFamily(lastName);//searchs the family 

        ArrayList members = fam.getMember();
        int a = 0;
        while (a < members.size()) {

            Person auxP = (Person) members.get(a);
            if (auxP.getName().equals(jComboPerson.getSelectedItem().toString())) { //compares the selected person 
                Outcome newE = new Outcome(jTextDescription.getText(), Integer.parseInt(jTextAmount.getText()), jComboBoxWeek.getSelectedItem().toString(), jComboBoxMonth.getSelectedItem().toString(), jLabelYear.getText(), jComboBoxClasification.getSelectedItem().toString());
                auxP.getOutcomeList().add(newE);//adds the outcome to the outcomelist
                break;

            }
            a++;
        }

    }

    public void comboBoxPer(Family fam, int command) { //recives a family and a command (an integer identifier)
        int a = 0;
        if (command == 1) {//depending on the value that combo has then it is going to update a different combo box
            jComboPerson.removeAllItems();//removes all items in the combo box

            while (a < fam.getMember().size()) {
                Person newPer = (Person) fam.getMember().get(a);
                jComboPerson.addItem(newPer.getName());//adds the name of the person in the combo box again but updated with newer people
                a++;
            }
        } else if(command == 2){
            jComboPerson1.removeAllItems();

            while (a < fam.getMember().size()) {
                Person newPer = (Person) fam.getMember().get(a);
                jComboPerson1.addItem(newPer.getName());
                a++;
            }
        }else{
            jComboPerson2.removeAllItems();

            while (a < fam.getMember().size()) {
                Person newPer = (Person) fam.getMember().get(a);
                jComboPerson2.addItem(newPer.getName());
                a++;
            }
        }

    }

    public Family searchFamily(String lastName) { //recives a last name  and returns the family that has the same last name

        Family aux = startF;
        while (aux != null) {

            if (aux.getLastName().equals(lastName)) {
                return aux;
            }
            aux = aux.nextF;
        }
        return null; //if it does not find any coincidences then it returns null

    }

    public boolean addFamily(String lastName, String location, ArrayList members) { //recives the neccesary information to create a new family object

        if (startF == null) { //if startF equals null then it means there are no families
            Family newFam = new Family(lastName, location, members);//creates a family object
            startF = newFam;
            return true;

        }

        Family newFam = new Family(lastName, location, members);
        newFam.nextF = startF;
        startF = newFam;
        return true;
    }

    public boolean checkForId(int id) { //checks if a specific id is repeated 

        Family aux = startF;
        while (aux != null) {
            ArrayList Members = aux.getMember();

            for (int a = 0; a < Members.size(); a++) {
                Person member = (Person) Members.get(a);
                if (member.getId() == id) { //if it finds a coincidence then return false

                    return false;
                }

            }
            aux = aux.nextF;
        }

        return true;
    }

    public boolean checkIfFilled() {//checks if all textfields are filled

        if (jTextAge.getText().equals("") | jTextID.getText().equals("") | jTextLastName.getText().equals("") | jTextLocation.getText().equals("") | jTextName.getText().equals("")) {
            return false;
        }

        return true;
    }

    public boolean checkIfFilledPerson() {//checks if all textfields are filled

        if (jTextAge2.getText().equals("") | jTextID2.getText().equals("") | JtextName2.getText().equals("")) {
            return false;
        }

        return true;
    }

    public boolean checkIfFilledInOutCome() {//checks if all textfields are filled
        if (jTextAmount.getText().equals("") | jTextDescription.getText().equals("")) {
            return false;
        }
        return true;
    }

    public void setFamiliesKind(String month, String year) { //recives a month and a year and sets for all families the family class
        Family aux = startF;
        while (aux != null) {
            aux.setClasificationIncome(month, year); 
            aux = aux.nextF;
        }
    }

    public void setMembersSaving(String year) {//recives a year and goes over all members in order to set its respective save
        Family aux = startF;
        while (aux != null) {
            int a = 0;
            while (a < aux.getMember().size()) {
                Person member = (Person) aux.getMember().get(a);
                member.setSave(year);
                a++;
            }
            aux = aux.nextF;
        }
    }
 
//Reports
    public void IncomeClasificationPercentage(String month, String year) {// 
        setFamiliesKind(month, year);
        int contT = 0; 
        int kinds[] = new int[5];

        Family aux = startF;
        while (aux != null) {

            if (aux.getIncomeClasification().equals("High Class")) {
                kinds[0] = kinds[0] +1;
                
            } else if (aux.getIncomeClasification().equals("Medium high class")) {
                kinds[1] = kinds[1] +1;

            } else if (aux.getIncomeClasification().equals("Medium low class")) {
                kinds[2] = kinds[2] +1;

            } else if (aux.getIncomeClasification().equals("Superior low class")) {
                kinds[3] = kinds[3] +1;

            } else {
                kinds[4] = kinds[4] +1;
               
            }
            contT++;
            aux = aux.nextF; 
        }
        
       // hardware.clear();

        hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        hardware.addElement("");
        hardware.addElement("Percentage of families of High Class: " + "%" + (kinds[0] * 100) / contT);
        hardware.addElement("");
        hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        hardware.addElement("");
        hardware.addElement("Percentage of families of Medium high class: " + "%" + (kinds[1] * 100) / contT);
        hardware.addElement("");
        hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        hardware.addElement("");
        hardware.addElement("Percentage of families of Medium low class: " + "%" + (kinds[2] * 100) / contT);
        hardware.addElement("");
        hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        hardware.addElement("");
        hardware.addElement("Percentage of families of Superior low class: " + "%" + (kinds[3] * 100) / contT);
        hardware.addElement("");
        hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
        hardware.addElement("");
        hardware.addElement("Percentage of families of Low class: " + "%" + (kinds[4] * 100) / contT); 
        hardware.addElement(""); 
    }

    public String moreSavingFamily(String month, String year) {//recives a month and a year and goes over all families to see which one has the most savings
        setFamiliesKind(month, year);
        setMembersSaving(year);

        int Array[] = new int[5];

        Family aux = startF;
        while (aux != null) {

            int money = 0;
            int x = 0;
            while (x < aux.getMember().size()) {
                Person member = (Person) aux.getMember().get(x);
                money += member.getSave();
                x++;
            }

            if (aux.getIncomeClasification().equals("High Class")) {
                Array[0] = Array[0] + money;
            } else if (aux.getIncomeClasification().equals("Medium high class")) {
                Array[1] = Array[1] + money;

            } else if (aux.getIncomeClasification().equals("Medium low class")) {
                Array[2] = Array[2] + money;

            } else if (aux.getIncomeClasification().equals("Superior low class")) {
                Array[3] = Array[3] + money;

            } else {
                Array[4] = Array[4] + money;
            }

            aux = aux.nextF;
        }

        int max = getMax(Array);

        switch (max) {
            case 0:
                return "High Class";
            case 1:
                return "Medium high class";
            case 2:
                return "Medium low class";
            case 3:
                return "Superior low class";
            default:
                return "Low class";
        }

    }

    public int SecurityAndPhysiologyPercentage() {//goes trough all families to see which ones only spends in security and physiology
        Family aux = startF;
        int contFam = 0;
        int contTotalFam = 0;
        while (aux != null) {

            ArrayList members = aux.getMember();
            if (checkPhysiologyAndSecurity(members)) {
                contFam++;
            } 
            contTotalFam++;
            aux = aux.nextF;
        } 
        int percentage = (contFam * 100) / contTotalFam;
        return percentage;  
    }

    public boolean checkPhysiologyAndSecurity(ArrayList members) { //recives an arrayList of members, returns true if all members only spend on physiology or security
        for (int i = 0; i < members.size(); i++) {
            Person per = (Person) members.get(i);
            ArrayList outcome = per.getOutcomeList();

            int x = 0;
            while (x < outcome.size()) {
                Outcome outc = (Outcome) outcome.get(x);
                if (outc.getClasificacion().equals("Physiology")) {
                    x ++;
                } else if(outc.getClasificacion().equals("Security")){
                    x ++;
                } else{
                    return false;
                }
            }

        }
        return true; 
    }

    public int getMax(int[] array) {//recives an array and returns the index of the biggest value
        int a = 1;
        int max = 0;

        while (a < array.length) {
            
            if (array[a] > array[max]) {
                max = a;
            }
            a++;
        }
        return max;
    }

    public int justSelfRealization(String year) { //recives a year and goes through all the families and returns the amount of families that waste 10% or more in self realization
        int quantity = 0;
        Family aux = startF;

        while (aux != null) {
            int x = 0;
            int money = aux.getIncome(year);
            int moneySelfR = 0;

            while (x < aux.getMember().size()) {
                Person member = (Person) aux.getMember().get(x);
                int y = 0;

                while (y < member.getOutcomeList().size()) {
                    Outcome outcome = (Outcome) member.getOutcomeList().get(y);

                    if (outcome.getClasificacion().equals("Self-realization")) {
                        moneySelfR += outcome.getAmount();
                    }

                    y++;
                }

                x++;
            }

            int percentage = (money / 100) * 10;
            if (moneySelfR >= percentage) {
                quantity++;
            }

            aux = aux.nextF;
        }

        return quantity;
    }

    public String schoolarGrade(String year) { //recives a year and returns the scholar grade that saved the most in that year, it goes over all families and members
        setMembersSaving(year);

        int Array[] = new int[4];
        Family aux = startF;

        while (aux != null) {
            int x = 0;

            while (x < aux.getMember().size()) {
                Person member = (Person) aux.getMember().get(x);
                if (member.getScholar_grade().equals("Non")) {
                    Array[0] = Array[0] + member.getSave();
                } else if (member.getScholar_grade().equals("Primary School")) {
                    Array[1] = Array[1] + member.getSave();
                } else if (member.getScholar_grade().equals("High School")) {
                    Array[2] = Array[2] + member.getSave();
                } else {
                    Array[3] = Array[3] + member.getSave();
                }
                x++;
            }

            aux = aux.nextF;
        }

        int max = getMax(Array);
        switch (max) {
            case 0:
                return "Non";
            case 1:
                return "Primary School";
            case 2:
                return "High School";
            default:
                return "College";
        }

    }

    public void sortFamiliesByAnnualIncome(String year) { //recives a year and shows in a jlist from more to less incomes

        ArrayList sortedI = sortIncome(year);
        ArrayList familiesIn = new ArrayList();

        int a = 0;
        while (a < sortedI.size()) {
            Family aux = startF;
            while (aux.getIncome(year) != (int) sortedI.get(a) | familiesIn.contains(aux.getLastName()) == true) {
                aux = aux.nextF;

            }
            hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            hardware.addElement("");
            hardware.addElement("Last name: " + aux.getLastName() + "     From: " + aux.getLocation() + "     Annual income: " + sortedI.get(a));
            hardware.addElement("");
            familiesIn.add(aux.getLastName());
            a++;

        }
    }

    public ArrayList sortIncome(String year) {//recives a year and gets all incomes made that year, also it sorts them 

        ArrayList IncomeArray = new ArrayList();

        Family aux = startF;
        while (aux != null) {

            IncomeArray.add(aux.getIncome(year));

            aux = aux.nextF;
        }
        Collections.sort(IncomeArray);
        Collections.reverse(IncomeArray);

        return IncomeArray;
    }

    public void sortFamiliesByAnnualSaving(String year) {//recives a year and shows in a jlist from more to less savings

        ArrayList sortedS = sortSaving(year);
        ArrayList familiesIn = new ArrayList();

        int a = 0;
        while (a < sortedS.size()) {
            Family aux = startF;
            while (aux.getSaving() != (int) sortedS.get(a) | familiesIn.contains(aux.getLastName()) == true) {
                aux = aux.nextF;
            }
            hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            hardware.addElement("");
            hardware.addElement("Last name: " + aux.getLastName() + "     From: " + aux.getLocation() + "     Annual saving: " + sortedS.get(a));
            hardware.addElement("");
            familiesIn.add(aux.getLastName());
            a++;

        }
    }

    public ArrayList sortSaving(String year) {//recives a year and gets all savings made that year, also it sorts them 
        setMembersSaving(year);

        ArrayList savingArray = new ArrayList();

        Family aux = startF;
        while (aux != null) {
            if (aux.getSaving() > 0) {
                savingArray.add(aux.getSaving());
            }
            aux = aux.nextF;
        }
        Collections.sort(savingArray);
        Collections.reverse(savingArray);

        return savingArray;
    }

    public void sortFamiliesZeroSaving(String year) {//recives a year and shows all families with zero savings

        int zeroSavingFamilies = getzeroSaving(year);
        ArrayList familiesIn = new ArrayList();

        int a = 0;
        while (a < zeroSavingFamilies) {
            Family aux = startF;
            while (aux.getSaving() != 0 | familiesIn.contains(aux.getLastName()) == true) {
                aux = aux.nextF;
            }
            hardware.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
            hardware.addElement("");
            hardware.addElement("Last name: " + aux.getLastName() + "     From: " + aux.getLocation());
            hardware.addElement("");
            familiesIn.add(aux.getLastName());
            a++;

        }
    }

    public int getzeroSaving(String year) { //recives a year and returns the amount of  families with zero savings
        setMembersSaving(year);
        int quantity = 0;

        Family aux = startF;
        while (aux != null) {
            if (aux.getSaving() == 0) {
                quantity++;
            }
            aux = aux.nextF;
        }
        return quantity;
    }

    public String getWeekPersonExpense(String name, String year) {//recives a name and a year and calcilates the week in which a specific person wasted more money
        Family fam = searchFamily(jComboBoxFamily1.getSelectedItem().toString());
        ArrayList members = fam.getMember();
        int a = 0;
        while (a < members.size()) {
            Person per = (Person) members.get(a);
            if (per.getName().equals(name)) {
                ArrayList OutComes = per.getOutcomeList();
                int x = 0;
                int[] weeks = new int[4];
                while (x < OutComes.size()) {
                    Outcome newO = (Outcome) OutComes.get(x);
                    if (newO.getWeek().equals("Week 1")) {
                        weeks[0] = weeks[0] + newO.getAmount();
                    } else if (newO.getWeek().equals("Week 2")) {
                        weeks[1] = weeks[1] + newO.getAmount();
                    } else if (newO.getWeek().equals("Week 3")) {
                        weeks[2] = weeks[2] + newO.getAmount();
                    } else {
                        weeks[3] = weeks[3] + newO.getAmount();
                    }
                    x++;
                }
                int max = getMax(weeks);
                if (max == 0) {
                    return "Week 1";
                } else if (max == 1) {
                    return "Week 2";
                } else if (max == 2) {
                    return "Week 3";
                } else {
                    return "Week 4";
                }
            }

            a++;
        }
        return "";
    }

    public String getWeekFamilyExpense(String lastName, String year) { //recives a name and a year and calcilates the week in which a specific family wasted more money
        Family fam = searchFamily(lastName);
        ArrayList members = fam.getMember();
        int[] weeks = new int[4];
        int a = 0;
        while (a < members.size()) {
            Person per = (Person) members.get(a);

            ArrayList Incomes = per.getIncomeList();
            int x = 0;

            while (x < Incomes.size()) {
                Income newI = (Income) Incomes.get(x);
                if (newI.getWeek().equals("Week 1")) {
                    weeks[0] = weeks[0] + newI.getAmount();
                } else if (newI.getWeek().equals("Week 2")) {
                    weeks[1] = weeks[1] + newI.getAmount();
                } else if (newI.getWeek().equals("Week 3")) {
                    weeks[2] = weeks[2] + newI.getAmount();
                } else {
                    weeks[3] = weeks[3] + newI.getAmount();
                }
                x++;
            }

            a++;
        }
        int max = getMax(weeks);
        if (max == 0) {
            return "Week 1";
        } else if (max == 1) {
            return "Week 2";
        } else if (max == 2) {
            return "Week 3";
        } else {
            return "Week 4";
        }

    }
    
    public void showIncomes(String name){ // Method that shows a person's incomes (all of them) and it's information in a jList
        Family fam = searchFamily(jComboBoxFamily2.getSelectedItem().toString());
        ArrayList members = fam.getMember();
        int a = 0;
        while (a < members.size()) {
            Person per = (Person) members.get(a); 
            if (per.getName().equals(name)) {
                ArrayList incomes = per.getIncomeList();
                int x = 0;
                hardware2.addElement("~~~List of incomes~~~");
                while (x < incomes.size()) {
                    Income newIn = (Income) incomes.get(x);
                    hardware2.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                    hardware2.addElement("");
                    hardware2.addElement("Description: " + newIn.getDescription());
                    hardware2.addElement("Amount: " + newIn.getAmount());
                    hardware2.addElement("Week: " + newIn.getWeek());
                    hardware2.addElement("Month: " + newIn.getMonth());
                    hardware2.addElement("Year: " + newIn.getYear());
                    hardware2.addElement("");
                    hardware2.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                    x ++;
                }
            }
            a ++;
        }
    }
    
      public void showOutcomes(String name){ // Method that shows a person's outcomes (all of them) and it's information in a jList
        Family fam = searchFamily(jComboBoxFamily2.getSelectedItem().toString());
        ArrayList members = fam.getMember();
        int a = 0;
        while (a < members.size()) {
            Person per = (Person) members.get(a); 
            if (per.getName().equals(name)) {
                ArrayList outcomes = per.getOutcomeList();
                int x = 0;
                hardware2.addElement("~~~List of outcomes~~~");
                while (x < outcomes.size()) {
                    Outcome newOut = (Outcome) outcomes.get(x);
                    hardware2.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                    hardware2.addElement("");
                    hardware2.addElement("Description: " + newOut.getDescription());
                    hardware2.addElement("Amount: " + newOut.getAmount());
                    hardware2.addElement("Week: " + newOut.getWeek());
                    hardware2.addElement("Month: " + newOut.getMonth());
                    hardware2.addElement("Year: " + newOut.getYear());
                    hardware2.addElement("Classification: " + newOut.getClasificacion());
                    hardware2.addElement("");
                    hardware2.addElement("~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~");
                    x ++;
                }
            }
            a ++;
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField JTextJob1;
    private javax.swing.JTextField JtextName2;
    private javax.swing.JButton addJobPersonButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButtonAddFamily;
    private javax.swing.JButton jButtonAddPerson;
    private javax.swing.JButton jButtonClean;
    private javax.swing.JButton jButtonClear2;
    private javax.swing.JButton jButtonConsult;
    private javax.swing.JButton jButtonInOutCome;
    private javax.swing.JButton jButtonLeft;
    private javax.swing.JButton jButtonLeft1;
    private javax.swing.JButton jButtonReport;
    private javax.swing.JButton jButtonright;
    private javax.swing.JButton jButtonright1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox8;
    private javax.swing.JComboBox<String> jComboBoxClasification;
    private javax.swing.JComboBox<String> jComboBoxFamily;
    private javax.swing.JComboBox<String> jComboBoxFamily1;
    private javax.swing.JComboBox<String> jComboBoxFamily2;
    private javax.swing.JComboBox<String> jComboBoxGender2;
    private javax.swing.JComboBox<String> jComboBoxInOut;
    private javax.swing.JComboBox<String> jComboBoxLastNames;
    private javax.swing.JComboBox<String> jComboBoxMonth;
    private javax.swing.JComboBox<String> jComboBoxMonthReport;
    private javax.swing.JComboBox<String> jComboBoxOperations;
    private javax.swing.JComboBox<String> jComboBoxSchool2;
    private javax.swing.JComboBox<String> jComboBoxWeek;
    private javax.swing.JComboBox<String> jComboPerson;
    private javax.swing.JComboBox<String> jComboPerson1;
    private javax.swing.JComboBox<String> jComboPerson2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelConsult;
    private javax.swing.JLabel jLabelYear;
    private javax.swing.JLabel jLabelYear1;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextAge;
    private javax.swing.JTextField jTextAge2;
    private javax.swing.JTextField jTextAmount;
    private javax.swing.JTextField jTextDescription;
    private javax.swing.JTextField jTextID;
    private javax.swing.JTextField jTextID2;
    private javax.swing.JTextField jTextLastName;
    private javax.swing.JTextField jTextLocation;
    private javax.swing.JTextField jTextName;
    private javax.swing.JTextField jTextOcupation2;
    // End of variables declaration//GEN-END:variables
}
